<?php

function github_menu () {

    $items = [];

    $items['admin/github/config'] = [
        'title'            => 'Github Module Config',
        'description'      => 'Configure Github Module',
        'page callback'    => 'drupal_get_form',
        'page arguments'   => ['github_admin_form'],
        'access arguments' => ['administer version control'],
        'file'             => 'github.admin.inc'
    ];

    $items['admin/github/info'] = [
        'title'            => 'Github Repository Information',
        'description'      => 'Reports a variety of useful information about the repository this project is currently a part of.',
        'page callback'    => 'github_get_info',
        'access arguments' => ['administer version control']
    ];

    return $items;

}

function github_webhook_on_push ($params) {

    //$params = !empty($params) ? json_decode($params) : [];

    nodejs_broadcast_message('Github Module', $params);

    $response = ['status' => 'OK'];

    if (variable_get('github_auto_pull', false)) {
        $response = github_reset();//github_pull();
    }

    return $response;

}

function github_reset ($options = []) {

    $repoUrl       = variable_get('github_repo_url');
    $adminUsername = variable_get('github_admin_username');
    $adminPassword = variable_get('github_admin_password');

    if (empty($repoUrl) || empty($adminUsername) || empty($adminPassword)) {

        return 'You Must Provide repository url, username, and password in your <a href="/admin/github/config">Github Configuration Form</a>';

    }

    $result = [];
    $return = 0;

    $repoUrlTokens = explode('://', $repoUrl);
    $modifiedRepoUrl = $repoUrlTokens[0].'://'."{$adminUsername}:{$adminPassword}@".$repoUrlTokens[1];

    //git fetch origin master
    //git reset --hard FETCH_HEAD
    //git clean -df

    $results = [];

    exec("git fetch origin master", $result, $return);

    $results[] = $result;

    exec("git reset --hard FETCH_HEAD", $result, $return);

    $results[] = $result;

    exec("git clean -df", $result, $return);

    $results[] = $result;

    return $results;

}

function github_get_info () {

    if (!github_project_is_version_controlled()) return 'This Project Is Not Version Controlled.';

    $info    = [];

    $version = [];
    $branch  = '';

    exec('git describe --always',     $version_mini_hash);
    exec('git rev-list HEAD | wc -l', $version_number);
    exec('git log -1',$line);
    $version['short'] = "v1.".trim($version_number[0]).".".$version_mini_hash[0];
    $version['full']  = "v1.".trim($version_number[0]).".$version_mini_hash[0] (".str_replace('commit ','',$line[0]).")";

    $info['version'] = $version;
    $info['branch']  = $branch;

    return json_encode($info);

}

function github_pull ($options = []) {

    $repoUrl       = variable_get('github_repo_url');
    $adminUsername = variable_get('github_admin_username');
    $adminPassword = variable_get('github_admin_password');

    if (empty($repoUrl) || empty($adminUsername) || empty($adminPassword)) {

        return 'You Must Provide repository url, username, and password in your <a href="/admin/github/config">Github Configuration Form</a>';

    }

    $result = [];
    $return = 0;

    $repoUrlTokens = explode('://', $repoUrl);
    $modifiedRepoUrl = $repoUrlTokens[0].'://'."{$adminUsername}:{$adminPassword}@".$repoUrlTokens[1];

    exec("git pull {$modifiedRepoUrl} master 2>&1", $result, $return);

    return $result;

}

function github_webhooks() {

    $webhooks = [];

    $webhooks['/webhook/github/push'] = [
        'description'      => 'Handles Git Push Event',
        'access arguments' => ['access content'],
        'handler'          => 'github_webhook_on_push'
    ];

    return $webhooks;

}

function github_project_is_version_controlled () {

    $branch = null;

    $shellOutput = [];
    exec('git branch | ' . "grep ' * '", $shellOutput);
    foreach ($shellOutput as $line) {
        if (strpos($line, '* ') !== false) {
            $branch = trim(strtolower(str_replace('* ', '', $line)));
        }
    }

    return $branch ? true : false;

}

function github_form_alter(&$form, $form_state, $form_id)  {
    switch ($form_id)  {

        case 'update_manager_install_form':
            //this is the module/theme installation form.
            $form['information2'] = [
                '#prefix' => '<strong>',
                '#markup' => t('Or'),
                '#suffix' => '</strong>'
            ];

            $form['project_github_url'] = [
                '#type' => 'textfield',
                '#title' => t('Install from a Git Repository'),
                '#description' => t('For example: %url', ['%url' => 'https://github.com/TechByNaylor/EasyRest.git']),
            ];

            $form['#validate'][] = 'github_form_validate_alter';

            array_unshift($form['#submit'], 'github_form_submit_alter');

            break;

    }

}

function github_form_validate_alter ($form, &$form_state) {
    $form_id = $form['#form_id'];

    switch ($form_id) {

        case 'update_manager_install_form':

            //check to see if project_github_url is set
            //if it is set, form_clear_errors() and proceed to the modified submit functionality

            if ($form_state['values']['project_github_url']) {

                //since we know the user is trying to install from a github url, clear other install validation errors and error messages
                $messages = drupal_get_messages('error');
                foreach($messages['error'] as $message) {

                    $errors = form_get_errors();
                    form_clear_error();

                    foreach ($errors as $elementName => $errorMessage) {

                        switch ($message) {
                            case 'You must either provide a URL or upload an archive file to install.':
                            case 'The provided URL is invalid.':
                                break;

                            default:
                                drupal_set_message($message, 'error');
                                form_set_error($elementName, $errorMessage);

                        }

                    }

                }

                //validate that the url provided is indeed a url
                if (!valid_url($form_state['values']['project_github_url'], TRUE)) {

                    form_set_error('project_github_url', 'Git repository url invalid');

                }

                if (false/*other conditions*/) {

                    form_set_error('project_github_url', t('Provided github project url is not a drupal module, theme, or is not a valid github repository.'));

                }

                //@todo: do some queries on the github url to determine if this is a module or a theme.

            }

            break;

    }

}

function github_form_submit_alter ($form, &$form_state) {
    $form_id = $form['#form_id'];

    switch ($form_id) {

        case 'update_manager_install_form':
            //we're going to take the project_github_url field
            //then we're going to clone the repo into our sites/all/modules folder using the credentials we've previously added to our github module

            //clone the repo
            //compress the cloned repo folder
            //make compressed archive available as though the user uploaded the file from the drupal module upload form
                //set the $_FILES['files']['name']['project_upload'] variable before continuing.

            //business as usual. :)
            drupal_set_message('todo: github_form_submit_alter','error');

            return;

            break;



    }

}